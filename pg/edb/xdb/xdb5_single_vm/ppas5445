#!/bin/bash
#

# chkconfig:            - 85 15
# description:          Postgres Plus Advanced Server 9.5 Service

### BEGIN INIT INFO
# Provides:             ppas-9.5 ppas-dbserver
# Required-Start:       $syslog
# Required-Stop:        $syslog
# Should-Start:         
# Should-Stop:          
# Short-Description:    ppas-9.5
# Description:          Postgres Plus Advanced Server 9.5 Service
### END INIT INFO

# Source function library.
IsRHEL="$(cat /proc/version | grep -c "Red Hat")"
IsUbuntu="$(cat /proc/version | grep -c "Ubuntu")"
IsSUSE="$(cat /proc/version | grep -c "SUSE")"

RHELSuccess()
{
    echo_success; echo
}

RHELFailure()
{
    echo_failure; echo
}

UBuntuSuccess()
{
    log_begin_msg ...; log_end_msg 0
}

UBuntuFailure()
{
    log_begin_msg ...; log_end_msg 1
}

SUSESuccess()
{
    echo $rc_done; echo
}

SUSEFailure()
{
    echo $rc_failed; echo
}

DefaultSuccess()
{
    echo "[ OK ]"
}

DefaultFailure()
{
    echo "[ FAILED ]"
}

status_prefix=""

if [ $IsRHEL = 1 ];
then
    . /etc/rc.d/init.d/functions
    status_prefix="RHEL"
elif [ $IsUbuntu = 1 ];
then
    . /lib/lsb/init-functions
    status_prefix="UBuntu"
elif [ $IsSUSE = 1 ];
then
    . /etc/rc.status
    status_prefix="SUSE"
else
    status_prefix="Default"
fi

STATUS_SUCCESS="${status_prefix}Success"
STATUS_FAILURE="${status_prefix}Failure"

export SERVICE_NAME="ppas5445"
export SERVICE_RETURN_CODE=0
export SERVICE_STATUS_EXIT_CODE=0
export SERVICE_PID=""
export SERVICE_DEPENDENTS="ppas95-pgagent"
export SERVICE_HAS_PIDFILE="NO"
export SERVICE_SHOULD_WAIT="YES"
export SERVICE_LOCK_FILE="/var/lock/$SERVICE_NAME/$SERVICE_NAME"
export SERVICE_LOG_FILE="/var/log/$SERVICE_NAME/$SERVICE_NAME.log"
export SERVICE_LOG_FILE_S="/var/log/$SERVICE_NAME/${SERVICE_NAME}_script.log"

export USERNAME=enterprisedb
export GROUPNAME=enterprisedb
export INSTALLDIR=/usr/ppas-9.5
export SERVICE_PASSWORD_STRING=""

IsCluster () 
{ 
    if [ "$SERVICE_HAS_CLUSTER" = "YES" ]; then
        echo 0;
    else
        echo 1;
    fi
}

HasPIDFile () 
{ 
    if [ "$SERVICE_HAS_PIDFILE" = "YES" ]; then
        echo 0;
    else
        echo 1;
    fi
}

#!/bin/bash

SERVICE_LOG_FILE_S_SIZE=0
SERVICE_DEPENDENTS_RESTART=""

MESSAGE_SERVICE_STARTING="Starting"
MESSAGE_SERVICE_STARTED="started"
MESSAGE_SERVICE_STOPPING="Stopping"
MESSAGE_SERVICE_STOPPED="stopped"
MESSAGE_SERVICE_RESTARTING="Restarting"
MESSAGE_SERVICE_RESTARTED="restarted"
MESSAGE_SERVICE_RELOADING="Reloading"
MESSAGE_SERVICE_RUNNING="is running"
MESSAGE_SERVICE_RUNNING_ALREADY="is already running"
MESSAGE_SERVICE_NOT_RUNNING="is not running"
MESSAGE_SERVICE_RELOADED_CONF="service configuration file reloaded"


ShouldWait()
{
    if [ "$SERVICE_SHOULD_WAIT" = "YES" ];
    then
        echo 0
    else
        echo 1
    fi
}

IsNullOrEmpty()
{
    if [ -z "$1" ];
    then
        echo 0
    else
        echo 1
    fi
}

IsValidProcessID()
{
    PID="$1"
    return_value=1

    if [[ ! -z "$PID" ]];
    then
        ps -p $PID > /dev/null
        return_value=$?
    fi

    echo $return_value
}

WaitForProcess()
{
    WaitForSpawn=$(IsNullOrEmpty "$SERVICE_PID")

    if [ $(ShouldWait) -eq 0 ];
    then
        Count=1;
        echo "[$FUNCNAME] WaitForSpawn = $WaitForSpawn" >> $SERVICE_LOG_FILE_S 2>&1
    
        while [ $Count -le 10 ];
        do
            if [ $WaitForSpawn -eq 0 ];
            then
                SetServicePID "$@"
            fi

            if [[ $(IsValidProcessID "$SERVICE_PID") != $WaitForSpawn ]];
            then
                sleep 1
                echo "[$FUNCNAME] Slept for $Count seconds..." >> $SERVICE_LOG_FILE_S 2>&1

                Count=$(expr $Count + 1)
            else
                echo "[$FUNCNAME] Success!" >> $SERVICE_LOG_FILE_S 2>&1
                Count=99
            fi
        done

        if [ $Count -lt 99 ];
        then
            echo "[$FUNCNAME] Timed out!" >> $SERVICE_LOG_FILE_S 2>&1
        fi
    fi
}

GetCommandForPID()
{
    xPID="$1"
    cmd="$(ps -o cmd -p $xPID | tail -1)"

    if [[ ! -z "$SERVICE_PASSWORD_STRING" ]];
    then
        cmd="$(echo "$cmd" | sed "s:\($SERVICE_PASSWORD_STRING\)\w\+:\1********:gI")"
    fi

    echo "$cmd"
}

ReturnCodeAdd()
{
    SERVICE_RETURN_CODE=$(expr $1 + $(GetReturnCode))
}

GetReturnCode()
{
    echo $SERVICE_RETURN_CODE
}

ExitService()
{
    if [[ $SERVICE_RETURN_CODE != 0 || $SERVICE_LOG_FILE_S_SIZE != $(wc -c $SERVICE_LOG_FILE_S) ]];
    then
        if [ $SERVICE_RETURN_CODE != 0 ];
        then
            Print
            PrintInfo "Total $(GetReturnCode) errors encountered"

            if [ -s "$SERVICE_LOG_FILE" ];
            then
                PrintInfo "Please see application log file $SERVICE_LOG_FILE for details"
            fi
        fi

        if [ -s "$SERVICE_LOG_FILE_S" ];
        then
            PrintInfo "Please see service script file $SERVICE_LOG_FILE_S for details"
        fi

        Print
    fi

    if [[ $SERVICE_RETURN_CODE = 0 ]];
    then
        SERVICE_RETURN_CODE=$SERVICE_STATUS_EXIT_CODE
    fi

    exit $SERVICE_RETURN_CODE
}

# Remove starting and trailing space
# - $1 String to operate on
# - $2 Change new lines to spaces
TrimString()
{
    s="$1"

    if [[ ! -z "$2" ]];
    then
        s=$(echo "$s" | tr '\n' ' ')
    fi

    s="$(echo "$s" | sed "s:[[:space:]]*$::g" | sed "s:^[[:space:]]*\(.*\)$:\1:g")"

    echo "$s"
}

CreateRemoveLockFile()
{
    if [ ! -z "$(GetServicePID)" ];
    then    
        touch $SERVICE_LOCK_FILE
    else
        rm -f $SERVICE_LOCK_FILE
    fi
}

PreServiceOp()
{
    op_type="$1"

    if [[ "$op_type" = *"start"* ]];
    then
        # Check for the PGDATA structure
        if [ ! -f "$PGDATA/PG_VERSION" ] && [ ! -d "$PGDATA/base" ]
        then
            PrintMessageEx "$PGDATA is missing."
            PrintFailure
 
            PrintMessage "$PGDATA is missing. Use \"service ppas-$PGMAJORVERSION initdb\" to initialize the cluster first."

            ReturnCodeAdd 1
            ExitService
        fi
    fi

    if [[ "$op_type" = *"stop"* || "$op_type" = *"restart"* ]];
    then
        ServiceDependentsStop
    fi
}

PostServiceOp()
{
    op_type="$1"

    CreateRemoveLockFile
}

Print()
{
    echo "$@" | tee -a $SERVICE_LOG_FILE_S
}

PrintMessage()
{
    Print "MSG:  [$(TrimString "$@")]"
}

PrintInfo()
{
    Print "INFO: [$(TrimString "$@")]"
}

PrintMessageWithNewLine()
{
    cluster="$2"
    node="$3"
    nodeinfo="$4"

    if [ $(IsCluster) -ne 0 ];
    then
        PrintMessage "$SERVICE_NAME $1"
    else
        PrintMessage "$SERVICE_NAME $1 for cluster $cluster and node $node"
    fi

    Print
}

PrintServiceInfo()
{
    PID=$(GetServicePID "$@")

    if [ ! -z "$PID" ];
    then
        PrintInfo "PID: $PID"
        PrintInfo "CMD: $(GetCommandForPID $PID)"
    fi
}

# Must be followed by PrintFailure or PrintSuccess in code
PrintMessageEx()
{
    cluster="$2"
    node="$3"
    nodeinfo="$4"

    PrintServiceInfo "$@"

    if [ "x$(PrintServiceInfo)" != "x" ];
    then
        Print
    fi

    if [ $(IsCluster) -ne 0 ];
    then
        echo -n "$(Print $1 $SERVICE_NAME) "
    else
        PrintInfo "Cluster: $cluster"
        PrintInfo "Node: $node"
        echo -n "$(Print $1 $SERVICE_NAME) "
    fi
}

# Failure
PrintFailure()
{
    $STATUS_FAILURE
}

# Success
PrintSuccess()
{
    $STATUS_SUCCESS
}

ServiceDependentsStop()
{
    for s in $SERVICE_DEPENDENTS
    do
  if [[ -f /etc/init.d/$s ]];
        then
      if [[ $(/etc/init.d/$s status | grep -c "$MESSAGE_SERVICE_RUNNING") -gt 0 ]];
            then
                SERVICE_DEPENDENTS_RESTART="$SERVICE_DEPENDENTS_RESTART $s"
            fi
        fi
    done

    SERVICE_DEPENDENTS_RESTART="$(TrimString "$SERVICE_DEPENDENTS_RESTART")"

    for s in $SERVICE_DEPENDENTS_RESTART
    do
        PrintInfo "$MESSAGE_SERVICE_STOPPING dependent service: $s"
        /etc/init.d/$s stop
    done
}

ServiceDependentsStartStopped()
{
    for s in $SERVICE_DEPENDENTS_RESTART
    do
        PrintInfo "$MESSAGE_SERVICE_STARTING dependent service: $s"
        /etc/init.d/$s start
    done
}

GetServicePIDFilename()
{
    cluster="$1"
    node="$2"
    value="$3"

    if [ $(IsCluster) -ne 0 ];
    then
        pidfile="/var/run/$SERVICE_NAME/$SERVICE_NAME.pid"
    else
        pidfile="/var/run/$SERVICE_NAME/$SERVICE_NAME.$node.pid"
    fi

    if [[ $(HasPIDFile) -ne 0 ]];
    then
        pidfile=""
    fi

    echo "$pidfile"
}

ServicePIDFileSet()
{
    pidfile="$(GetServicePIDFilename "$@")"

    if [[ $(HasPIDFile) -eq 0 && ! -e $pidfile && "x$SERVICE_PID" != "x" ]];
    then
        echo "$SERVICE_PID" > $pidfile
        echo "$(GetCommandForPID $SERVICE_PID)" >> $pidfile
    fi
}

ServicePIDFileRemove()
{
    if [[ $(HasPIDFile) -eq 0 ]];
    then
        pidfile="$(GetServicePIDFilename "$@")"
        rm -fv $pidfile >> $SERVICE_LOG_FILE_S 2>&1
    fi
}

SetServicePIDFromFile()
{
    pidfile="$(GetServicePIDFilename "$@")"

    if [ $(HasPIDFile) -eq 0 ];
    then
        if [[ -e "$pidfile" && $(wc -l $pidfile | cut -f1 -d" ") -eq "2" ]];
        then
            PID="$(head -1 $pidfile)" 2>> $SERVICE_LOG_FILE_S
            cmd="$(tail -1 $pidfile)" 2>> $SERVICE_LOG_FILE_S

            if [[ $(IsValidProcessID $PID) -eq 0 && "$(GetCommandForPID $PID)" = "$cmd" ]];
            then
                SERVICE_PID="$PID"
            else
                PrintInfo "$SERVICE_NAME dead but pid file \"$pidfile\" exists. Please delete this file manually"
                ReturnCodeAdd 1
                ExitService
            fi
        else
            SERVICE_PID=""
        fi
    fi
}

SetServicePID()
{
    SERVICE_PID=""
    SetServicePIDFromFile "$@"

    if [ "x$SERVICE_PID" = "x" ];
    then
        SetServiceProcessPID "$@"
    fi
}

SetServiceProcessPID()
{
    PID=""
    type ServiceSetPID > /dev/null 2>&1

    if [ $? -eq 0 ];
    then
        ServiceSetPID "$@"
    fi
}

GetServicePID()
{
    echo $SERVICE_PID
}

CreateFolder()
{
    d="$1"

    if [ ! -d $d ];
    then
        mkdir -p $d 
    fi

    chown -R $USERNAME:$GROUPNAME $d
    chmod -R 700 $d
}

CreateFile()
{
    f="$1"

    touch $f

    if [ "$(ls -l $f | awk '{print $3}')" != $USERNAME ];
    then
        chown $USERNAME:$GROUPNAME $f
    fi
}

ValidateSupportFolders()
{
    CreateFolder "/var/log/$SERVICE_NAME"
    CreateFolder "/var/lock/$SERVICE_NAME"
    CreateFolder "/var/run/$SERVICE_NAME" 

    CreateFile $SERVICE_LOG_FILE
}


# Service Functions
start()
{
    SetServicePID "$@"
    IsServiceStopped=$(IsValidProcessID $SERVICE_PID)

    if [ $IsServiceStopped -ne 0 ];
    then
        PrintMessageEx "$MESSAGE_SERVICE_STARTING" "$@"

        ReturnCode=$(ServiceStart "$@")
        WaitForProcess "$@"

        SetServicePID "$@"
        ServicePIDFileSet "$@"
        IsServiceStopped=$(IsValidProcessID $SERVICE_PID)

        if [ $IsServiceStopped -ne 0 ];
        then
            PrintFailure "$@"
            ServicePIDFileRemove "$@"
            ReturnCodeAdd 1
         else
             PrintSuccess
             Print
             PrintServiceInfo "$@"
             PrintMessageWithNewLine "$MESSAGE_SERVICE_STARTED" "$@"
        fi
    else
        PrintServiceInfo "$@"
        PrintMessageWithNewLine "$MESSAGE_SERVICE_RUNNING_ALREADY" "$@"
    fi
}

stop()
{
    SetServicePID "$@"
    IsServiceStopped=$(IsValidProcessID $SERVICE_PID)

    if [ $IsServiceStopped -ne 0 ];
    then
        PrintMessageWithNewLine "$MESSAGE_SERVICE_NOT_RUNNING" "$@"
    else
        PrintMessageEx "$MESSAGE_SERVICE_STOPPING" "$@"

        ReturnCode=$(ServiceStop "$@")
        ServicePIDFileRemove "$@"
        WaitForProcess "$@"

        SetServicePID "$@"
        IsServiceStopped=$(IsValidProcessID $SERVICE_PID)

        if [ $IsServiceStopped -ne 0 ];
        then
            PrintSuccess
            Print
            PrintMessageWithNewLine "$MESSAGE_SERVICE_STOPPED" "$@"
        else
            PrintFailure "$@"
            SetServicePID "$@"
            ServicePIDFileSet "$@"
            ReturnCodeAdd 1
        fi
    fi
}

status()
{
    SetServicePID "$@"
    IsServiceStopped=$(IsValidProcessID $SERVICE_PID)

    if [ $IsServiceStopped -ne 0 ];
    then
        PrintMessageWithNewLine "$MESSAGE_SERVICE_NOT_RUNNING" "$@"
        SERVICE_STATUS_EXIT_CODE=3
    else
        PrintServiceInfo "$@"
        PrintMessage "$SERVICE_NAME $MESSAGE_SERVICE_RUNNING" "$@"
    fi
}

restart()
{
    type ServiceRestart > /dev/null 2>&1

    if [ $? -eq 0 ];
    then
        PrintMessageEx "$MESSAGE_SERVICE_RESTARTING" "$@"
        ReturnCode=$(ServiceRestart "$@")

        if [ $ReturnCode -eq 0 ];
        then
            PrintSuccess
            SetServicePID "$@"
            ServicePIDFileSet "$@"
            Print
            PrintServiceInfo
            PrintMessageWithNewLine "$MESSAGE_SERVICE_RESTARTED "$@""
        else
            PrintFailure "$@"
            ServicePIDFileRemove "$@"
        fi
    else
        stop "$@"
        start "$@"
    fi

    ServiceDependentsStartStopped
}

reload()
{
    SetServicePID "$@"
    IsServiceStopped=$(IsValidProcessID $SERVICE_PID)

    if [ $IsServiceStopped -ne 0 ];
    then
        PrintMessageWithNewLine "$MESSAGE_SERVICE_NOT_RUNNING" "$@"
    else
        PrintMessageEx "$MESSAGE_SERVICE_RELOADING" "$@"

        ReturnCode=$(ServiceReload "$@")

        if [ $ReturnCode -eq 0 ];
        then
            conffile=""

            if [ ! -z "$SERVICE_CONF_FILE" ];
            then
                confile=": $SERVICE_CONF_FILE"
            fi

            PrintSuccess
            Print
            PrintMessage "$SERVICE_NAME $MESSAGE_SERVICE_RELOADED_CONF $confifle"
            Print
        else
            PrintFailure "$@"
        fi
    fi
}

try_restart()
{
    condrestart "$@"
}

condrestart()
{
    [ -e "$SERVICE_LOCK_FILE" ] && restart "$@" || :
}

condstop()
{
    [ -e "$SERVICE_LOCK_FILE" ] && stop "$@" || :
}

cluster_operation()
{
    funcName="$1"
    nodes=$(ServiceNodes)

    for node in $nodes
    do
        nodeInfo="$(ServiceClusterNodeInfo $node)"
        $funcName "$SERVICE_CLUSTER" "$node" "$nodeInfo"
    done

    ReturnCodeAdd 0
}


ValidateSupportFolders

CreateFile $SERVICE_LOG_FILE_S
echo "[$(date '+%F %H:%M:%S.%N')] $SERVICE_NAME $1" >> $SERVICE_LOG_FILE_S 2>&1

SERVICE_LOG_FILE_S_SIZE=$(wc -c $SERVICE_LOG_FILE_S)


ServiceSetPID()
{
    # Print PID
    pidFile="$PGDATA/postmaster.pid"

    if [[ -s $pidFile ]];
    then
        SERVICE_PID=$(head -n 1 $pidFile) >> $SERVICE_LOG_FILE_S 2>&1
    else
        SERVICE_PID=""
    fi
}

ServiceStart()
{
    _ServiceStartRestart "start"
}

ServiceStop()
{
    su - $USERNAME -c "$INSTALLDIR/bin/pg_ctl stop -m fast -w -D \"$PGDATA\" >> $SERVICE_LOG_FILE 2>&1" > /dev/null 
    echo $?
}

ServiceReload()
{
    su - $USERNAME -c "$INSTALLDIR/bin/pg_ctl reload -D \"$PGDATA\" >> $SERVICE_LOG_FILE 2>&1" > /dev/null 
    echo $?
}

ServiceRestart()
{
    ReturnCode=$(_ServiceStartRestart "restart")
    echo $ReturnCode
}

_ServiceStartRestart()
{
    op="$1"

    su - $USERNAME -c "touch $PGDATA/pg_log/startup.log" >> $SERVICE_LOG_FILE_S 2>&1

    su - $USERNAME -c "PATH=$INSTALLDIR/bin:$PATH_PL_LANGUAGES:$PATH LD_LIBRARY_PATH=$LD_LIBRARY_PATH $INSTALLDIR/bin/pg_ctl -w $op -D \"$PGDATA\" -o \"-p $PGPORT\" -l \"$PGDATA/pg_log/startup.log\" >> $SERVICE_LOG_FILE_S 2>&1" > /dev/null 

    echo $?
}

PGVERSION=9.5.3.8
PGMAJORVERSION=`echo "$PGVERSION" | sed 's/^\([0-9]*\.[0-9]*\).*$/\1/'`

LOCALEPARAMETER=$2
PGENGINE=/usr/ppas-9.5/bin
PGPORT=5445
PGDATA=/tmp/5445/data
PGLOG=/tmp/5445/pgstartup.log

#[ -f /etc/sysconfig/ppas/ppas-9.5 ] && . /etc/sysconfig/ppas/ppas-9.5

export SERVICE_CONF_FILE=""


initdb()
{
    # If the locale name is specified just after the initdb parameter, use it:
    if [ -z $LOCALEPARAMETER ]
    then
        LOCALE=`echo $LANG`
    else
        LOCALE=`echo $LOCALEPARAMETER`
    fi

    LOCALESTRING="--locale=$LOCALE"

    if [ -f "$PGDATA/PG_VERSION" ]
    then
        echo "Data directory is not empty!"
        echo_failure
    else
        echo -n $"Initializing database: "

        if [ ! -e "$PGDATA" -a ! -h "$PGDATA" ]
        then
            mkdir -p "$PGDATA" || exit 1
            chown enterprisedb:enterprisedb "$PGDATA"
            chmod go-rwx "$PGDATA"
        fi

        # Clean up SELinux tagging for PGDATA
        [ -x /sbin/restorecon ] && /sbin/restorecon "$PGDATA"

        # Make sure the startup-time log file is OK, too
        if [ ! -e "$PGLOG" -a ! -h "$PGLOG" ]
        then
            touch "$PGLOG" || exit 1
            chown enterprisedb:enterprisedb "$PGLOG"
            chmod go-rwx "$PGLOG"

            [ -x /sbin/restorecon ] && /sbin/restorecon "$PGLOG"
        fi

        # Initialize the database
        su -l enterprisedb -c "$PGENGINE/initdb --pgdata='$PGDATA' --auth='ident' $LOCALESTRING $INITDBOPTS" >> "$PGLOG" 2>&1 < /dev/null

        # Create directory for postmaster log
        mkdir "$PGDATA/pg_log"
        chown enterprisedb:enterprisedb "$PGDATA/pg_log"
        chmod go-rwx "$PGDATA/pg_log"

        [ -f "$PGDATA/PG_VERSION" ] && echo_success
        [ ! -f "$PGDATA/PG_VERSION" ] && echo_failure

        echo
    fi
}


# See how we were called.
case "$1" in
  start)
        PreServiceOp start
        start
        PostServiceOp start
        ;;
  stop)
        PreServiceOp stop
        stop
        PostServiceOp stop
        ;;
  status)
        PreServiceOp status
        status
        PostServiceOp status
        ;;
  restart)
        PreServiceOp restart
        restart
        PostServiceOp restart
        ;;
  condstop)
        PreServiceOp condstop
        condstop
        PostServiceOp condstop
        ;;
  condrestart)
        PreServiceOp condrestart
        condrestart
        PostServiceOp condrestart
        ;;
  try-restart)
        PreServiceOp try-restart
        try_restart
        PostServiceOp try-restart
        ;;
  reload)
        PreServiceOp reload
        reload
        PostServiceOp reload
        ;;
  initdb)
        PreServiceOp initdb
        initdb
        PostServiceOp initdb
        ;;
  "")
        echo "Usage: $0 {start|stop|status|restart|condstop|condrestart|try-restart|reload|initdb}"
        ;;

  *)
        echo "Usage: $0 {start|stop|status|restart|condstop|condrestart|try-restart|reload|initdb}"
esac

# Exit with the return code
ExitService
